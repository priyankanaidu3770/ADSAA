import java.util.*;
import java.lang.Math;
class AVLNode {
    int key;
    int height;
    AVLNode left, right;

    AVLNode(int key) {
        this.key = key;
        left = right = null;
        height = 0;
    }
}

class AVLTree {

    // Method to get the height of a node
    public static int height(AVLNode node) {
        return (node == null ? -1 : node.height);
    }

    // Left-Left rotation
    public static AVLNode ll(AVLNode k2) {
        AVLNode k1 = k2.left;
        k2.left = k1.right;
        k1.right = k2;
        k1.height = Math.max(height(k1.left), height(k1.right)) + 1;
        k2.height = Math.max(height(k2.left), height(k2.right)) + 1;
        return k1;
    }

    // Right-Right rotation
    public static AVLNode rr(AVLNode k1) {
        AVLNode k2 = k1.right;
        k1.right = k2.left;
        k2.left = k1;
        k1.height = Math.max(height(k1.left), height(k1.right)) + 1;
        k2.height = Math.max(height(k2.left), height(k2.right)) + 1;
        return k2;
    }

    // Left-Right rotation
    public static AVLNode lr(AVLNode k3) {
        k3.left = rr(k3.left);
        return ll(k3);
    }

    // Right-Left rotation
    public static AVLNode rl(AVLNode k1) {
        k1.right = ll(k1.right);
        return rr(k1);
    }

    // Insert a key into the AVL tree
    public static AVLNode insert(int key, AVLNode root) {
        if (root == null)
            return new AVLNode(key);
        if (key < root.key) {
            root.left = insert(key, root.left);
            if (height(root.left) - height(root.right) == 2) {
                if (key <root.left.key)
                    root = ll(root);
                else
                    root = lr(root);
            }
        } else if (key > root.key) {
            root.right = insert(key, root.right);
            if (height(root.left) - height(root.right) == -2) {
                if (key > root.right.key)
                    root = rr(root);
                else
                    root = rl(root);
            }
        }
        root.height = Math.max(height(root.left), height(root.right)) + 1;
        return root;
    }

    // Find the node with the minimum value
    public static AVLNode fmin(AVLNode root) {
        if (root == null || root.left == null)
            return root;
        return fmin(root.left);
    }

    // Delete a key from the AVL tree
    public static AVLNode delete(int key, AVLNode root) {
        if (root == null)
            return root;
        if (key < root.key) {
            root.left = delete(key, root.left);
        } else if (key > root.key) {
            root.right = delete(key, root.right);
        } else {
            if (root.left != null && root.right != null) {
                AVLNode mini = fmin(root.right);
                root.key = mini.key;
                root.right = delete(mini.key, root.right);
            } else {
                root = (root.left != null) ? root.left : root.right;
            }
        }

        if (root != null) {
            root.height = Math.max(height(root.left), height(root.right)) + 1;
            if (height(root.left) - height(root.right) == 2) {
                if (height(root.left.left) >= height(root.left.right))
                    root = ll(root);
                else
                    root = lr(root);
            } else if (height(root.left) - height(root.right) == -2) {
                if (height(root.right.right) >= height(root.right.left))
                    root = rr(root);
                else
                    root = rl(root);
            }
        }
        return root;
    }

    // In-order traversal of the AVL tree
    public static void inOrder(AVLNode root) {
        if (root != null) {
            inOrder(root.left);
            System.out.print(root.key + " ");
            inOrder(root.right);
        }
    }

    public static void main(String[] args) {
        AVLNode root = null;
        Scanner sc=new Scanner(System.in);
        int a[]=new int[100];
        System.out.println("No. of elements:");
        int n=sc.nextInt();
        System.out.println("Enter the elements:");
        for(int i=0;i<=n-1;i++)
         a[i]=sc.nextInt();

        // Insertion of elements in AVL Tree
        for (int x : a) {
            root = insert(x, root);
            System.out.println("Inserted: " + x);
            System.out.println("Height of the tree: " + height(root));
        }

        // Inorder traversal after all insertions
        System.out.println("\nInorder traversal of the AVL Tree:");
        inOrder(root);
        System.out.println();

        // Deleting an element and printing the AVL Tree after deletion
        System.out.println("Enter a number to be deleted:");
        int y=sc.nextInt();
        root = delete(y, root);
        System.out.println("\nInorder traversal after deletion:");
        inOrder(root);
    }
}
